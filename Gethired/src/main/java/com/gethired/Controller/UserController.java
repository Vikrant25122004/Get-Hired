package com.gethired.Controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.graphql.GraphQlProperties.Http;
import org.springframework.boot.autoconfigure.h2.H2ConsoleProperties;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.gethired.Entities.Education;
import com.gethired.Entities.Experience;
import com.gethired.Entities.LinkedinJobs;
import com.gethired.Entities.User;
import com.gethired.Services.UserService;

@RequestMapping("/user")
@RestController
public class UserController {
    @Autowired
    private UserService userService;
    @PutMapping("/updatepic")
    public ResponseEntity<?> updatepic(@RequestParam MultipartFile proficpic){
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        String username = authentication.getName();
        try {
            userService.updatepic(proficpic,username);
            return new ResponseEntity<>(HttpStatus.ACCEPTED);
            
        } catch (Exception e) {
            e.printStackTrace();
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    @GetMapping("/getpic")
public ResponseEntity<?> getpic(){
    Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
    String username = authentication.getName();
    try {
        User user =  userService.getuser(username);
        // Use the correct getters generated by Lombok
        if(user.getProfilpicname()!=null){
            
            return ResponseEntity.ok().contentType(MediaType.valueOf(user.getProfilepictype())).body(user.getProfilepicbyte());
        }
        return new ResponseEntity<>(HttpStatus.NOT_FOUND);

    } catch (Exception e) {
        e.printStackTrace();
        return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
    }
}
   @PutMapping("/updateuser")
   public ResponseEntity<?> update(@RequestBody User user){
      Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
      String username = authentication.getName();
      try {
        userService.updateuserr(user,username);
        return new ResponseEntity<>(HttpStatus.OK);
      } catch (Exception e) {
         e.printStackTrace();
         return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);

      }

   }
   @GetMapping("/getexp")
   public ResponseEntity<?> getexp(){
    Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
      String username = authentication.getName();
      try {
        List<Experience> experiences = userService.getexperience(username);
        return new ResponseEntity<>(experiences, HttpStatus.OK);
      } catch (Exception e) {
        // TODO: handle exception
        e.printStackTrace();
        return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
      }

   }
   @PostMapping("/addexp")
   public ResponseEntity<?> addexp(@RequestBody Experience experience){
    Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
    String username = authentication.getName();
    try {
        userService.addexp(experience,username);
        return new ResponseEntity<>(HttpStatus.OK);
    } catch (Exception e) {
        // TODO: handle exception
        e.printStackTrace();
        return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
    }
   }
    @GetMapping("/getuser")
    public ResponseEntity<?> getuser(){
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        String username = authentication.getName();
        try {
            User user = userService.getuser(username);
           return new ResponseEntity<>(user,HttpStatus.OK);

        } catch (Exception e) {
            // TODO: handle exception
            e.printStackTrace();
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    @PutMapping("/addedu")
    public ResponseEntity<?> addeduc(@RequestBody Education education){
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        String username = authentication.getName();
        try {
            userService.addedu(education, username);
            return new ResponseEntity<>(HttpStatus.OK);
        } catch (Exception e) {
            // TODO: handle exception
            e.printStackTrace();
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    @GetMapping("/getedu")
    public ResponseEntity<?> geteduc(){
         Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        String username = authentication.getName();
        try {
            List<Education> educations = userService.getedu(username);
            return new ResponseEntity<>(educations,HttpStatus.OK);
        } catch (Exception e) {
            e.printStackTrace();
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
            // TODO: handle exception
        }

    }
    @PostMapping("/getlinkedinjobs")
    public ResponseEntity<?> geteduc(@RequestBody String position){
       try{
        List<LinkedinJobs> jobs = userService.getlinkjobs(position);
        return new ResponseEntity<>(jobs, HttpStatus.OK);
       }
       catch(Exception e){
        e.printStackTrace();
        return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
       }

    }
}
